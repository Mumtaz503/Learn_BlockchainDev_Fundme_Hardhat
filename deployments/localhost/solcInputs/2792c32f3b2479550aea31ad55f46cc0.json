{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    mapping(address => uint256) public addressToAmountFunded;\n    address[] public funders;\n\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\n    address public /* immutable */ i_owner;\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\n\n    //1) Create a variable of AggregatorV3Interface object type\n    AggregatorV3Interface public PriceFeed;\n    \n    //2) Pass it in the constructor of your contract to access the data of address for price feed contract\n    constructor(address PriceFeedAddress) {\n        i_owner = msg.sender;\n\n        //3) Access the price feed contract address in the constructor (Modularization)\n        PriceFeed = AggregatorV3Interface(PriceFeedAddress);\n    }\n\n    function fund() public payable {\n\n        //8) Get Conversion rate now has two parameters You can Add PriceFeed variable in here\n        require(msg.value.getConversionRate(PriceFeed) >= MINIMUM_USD, \"You need to spend more ETH!\");\n        \n        addressToAmountFunded[msg.sender] += msg.value;\n        funders.push(msg.sender);\n    }\n    \n    function getVersion() public view returns (uint256){\n        //9) ETH/USD price feed address of Sepolia Network accessed directly from AggregatorV3Interface\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(PriceFeed);\n        return priceFeed.version();\n    }\n    \n    modifier onlyOwner {\n        // require(msg.sender == owner);\n        if (msg.sender != i_owner) revert NotOwner();\n        _;\n    }\n    \n    function withdraw() public onlyOwner {\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n        // // transfer\n        // payable(msg.sender).transfer(address(this).balance);\n        // // send\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        // require(sendSuccess, \"Send failed\");\n        // call\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n    // Explainer from: https://solidity-by-example.org/fallback/\n    // Ether is sent to contract\n    //      is msg.data empty?\n    //          /   \\ \n    //         yes  no\n    //         /     \\\n    //    receive()?  fallback() \n    //     /   \\ \n    //   yes   no\n    //  /        \\\n    //receive()  fallback()\n\n    fallback() external payable {\n        fund();\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        //4) Pass the AggregatorV3Interface object in the function to access contract address\n        AggregatorV3Interface PriceFeed\n    ) internal view returns (uint256) {\n        // // Sepolia ETH / USD Address\n        // // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\n        // );\n\n        //5) Access the round data function from AggregatorV3Interface\n        (, int256 answer, , , ) = PriceFeed.latestRoundData();\n\n        return uint256(answer * 10000000000);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        //6) Pass the AggregatorV3Interface object in the conversionrate function\n        AggregatorV3Interface PriceFeed\n    ) internal view returns (uint256) {\n        //7) Access the Get Price Function from The AggregatorV3Interface Interface\n        uint256 ethPrice = getPrice(PriceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}